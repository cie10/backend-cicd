name: Build, Push, and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    #Docker 이미지를 빌드하고, Docker Hub에 푸시하는 작업
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.APP_IMAGE }} .
          docker push ${{ secrets.APP_IMAGE }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy Spring Boot app to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            # 최신 Spring Boot Docker 이미지 Pull
            echo "Pulling latest Spring Boot app image..."
            docker pull ${{ secrets.APP_IMAGE }}

            # 기존 Spring Boot 컨테이너 중지 및 제거
            echo "Stopping old Spring Boot container..."
            docker stop ${{ secrets.APP_CONTAINER_NAME }} || true
            docker rm ${{ secrets.APP_CONTAINER_NAME }} || true

            # 새로운 Spring Boot 컨테이너 실행
            echo "Starting new Spring Boot container..."
            docker run -d \
              --name ${{ secrets.APP_CONTAINER_NAME }} \
              --network backend_network \
              -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
              -e PORT=${{ secrets.PORT }} \
              -p 8080:8080 \
              ${{ secrets.APP_IMAGE }}